services:

#* API Web
#API 1
  api1:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: api1
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORT_API1}
    ports:
      - "${PORT_API1}:${PORT_API1}"
    networks:
      - mongo-network
    depends_on:
      cert-generator:
        condition: service_healthy

#API 2
  api2:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: api2
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORT_API2}
    ports:
      - "${PORT_API2}:${PORT_API2}"
    networks:
      - mongo-network
    depends_on:
      cert-generator:
        condition: service_healthy

#API 3
  api3:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: api3
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORT_API3}
    ports:
      - "${PORT_API3}:${PORT_API3}"
    networks:
      - mongo-network
    depends_on:
      cert-generator:
        condition: service_healthy

#Backup api
  backup_api:
    image: busybox:latest
    container_name: backup_api
    volumes:
      - ./backup:/var/www
    command: ["httpd", "-f", "-p", "3000", "-h", "/var/www"]
    depends_on:
      cert-generator:
        condition: service_healthy

#* MONGODB
#config
  mongo_config1:
    container_name: mongo_config1
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --configsvr --replSet configReplSet --port ${PORT_MONGO_CONFIG} --bind_ip_all
    volumes:
      - .mongo_config_data1:/data/db
    networks:
      - mongo-network

  mongo_config2:
    container_name: mongo_config2
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --configsvr --replSet configReplSet --port ${PORT_MONGO_CONFIG} --bind_ip_all
    volumes:
      - .mongo_config_data2:/data/db
    networks:
      - mongo-network

  mongo_config3:
    container_name: mongo_config3
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --configsvr --replSet configReplSet --port ${PORT_MONGO_CONFIG} --bind_ip_all
    volumes:
      - .mongo_config_data3:/data/db
    networks:
      - mongo-network

# Shard
#shard 1
  mongo_shard1-1:
    container_name: mongo_shard1-1
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --shardsvr --replSet shard1ReplSet --port ${PORT_MONGO_SHARD} --bind_ip_all
    volumes:
      - mongo_shard_data1-1:/data/db
    networks:
      - mongo-network

  mongo_shard1-2:
    container_name: mongo_shard1-2
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --shardsvr --replSet shard1ReplSet --port ${PORT_MONGO_SHARD} --bind_ip_all
    volumes:
      - mongo_shard_data1-2:/data/db
    networks:
      - mongo-network

#shard 2
  mongo_shard2-1:
    container_name: mongo_shard2-1
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --shardsvr --replSet shard2ReplSet --port ${PORT_MONGO_SHARD} --bind_ip_all
    volumes:
      - mongo_shard_data2-1:/data/db
    networks:
      - mongo-network

  mongo_shard2-2:
    container_name: mongo_shard2-2
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --shardsvr --replSet shard2ReplSet --port ${PORT_MONGO_SHARD} --bind_ip_all
    volumes:
      - mongo_shard_data2-2:/data/db
    networks:
      - mongo-network

# Mongos Router
  mongos:
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongos --configdb configReplSet/mongo_config1:${PORT_MONGO_CONFIG},mongo_config2:${PORT_MONGO_CONFIG},mongo_config3:${PORT_MONGO_CONFIG} --bind_ip_all --port ${PORT_MONGO_ROUTER}
    ports:
      - "${PORT_MONGO_ROUTER}:${PORT_MONGO_ROUTER}"
    networks:
      - mongo-network
    depends_on:
      - mongo_config1
      - mongo_config2
      - mongo_config3
      - mongo_shard1-1
      - mongo_shard1-2
      - mongo_shard2-1
      - mongo_shard2-2

#* NGINX
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      api1:
        condition: service_started
      api2:
        condition: service_started
      api3:
        condition: service_started
      cert-generator:
        condition: service_healthy

#cert generator
  cert-generator:
    image: alpine:latest
    container_name: cert-generator
    volumes:
      - ./certs:/etc/letsencrypt
    command: >
      /bin/sh -c "
        apk add openssl &&
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/letsencrypt/privkey.pem -out /etc/letsencrypt/fullchain.pem -subj '/CN=localhost' &&
        chown -R 101:101 /etc/letsencrypt &&
        tail -f /dev/null  # Keeps the container active after generating the cert
      "
    healthcheck:
      test: ["CMD", "test", "-f", "/etc/letsencrypt/fullchain.pem"]  # Verifies that the certificate has been generated
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

# extra
volumes:
  #config
  mongo_config_data1:
    driver: local
  mongo_config_data2:
    driver: local
  mongo_config_data3:
    driver: local
  #shard
  mongo_shard_data1-1:
    driver: local
  mongo_shard_data1-2:
    driver: local
  mongo_shard_data2-1:
    driver: local
  mongo_shard_data2-2:
    driver: local

networks:
  mongo-network:
    driver: bridge