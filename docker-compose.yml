services:
#API 1
  api1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api1
    image: app
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORTAPI1}
    depends_on:
      - cert-generator:
          condition: service_healthy

#API 2
  api2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api2
    image: app
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORTAPI2}
    depends_on:
      - cert-generator:
          condition: service_healthy

#API 3
  api1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api1
    image: app
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORTAPI3}
    depends_on:
      - cert-generator:
          condition: service_healthy

#DB 1
#DB 2

#nginx
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      app1:
        condition: service_started
      app2:
        condition: service_started
      app3:
        condition: service_started
      cert-generator:
        condition: service_healthy

#cert generator
  cert-generator:
    image: alpine:latest
    container_name: cert-generator
    volumes:
      - ./certs:/etc/letsencrypt
    command: >
      /bin/sh -c "
        apk add openssl &&
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/letsencrypt/privkey.pem -out /etc/letsencrypt/fullchain.pem -subj '/CN=localhost' &&
        chown -R 101:101 /etc/letsencrypt &&
        tail -f /dev/null  # Keeps the container active after generating the cert
      "
    healthcheck:
      test: ["CMD", "test", "-f", "/etc/letsencrypt/fullchain.pem"]  # Verifies that the certificate has been generated
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s