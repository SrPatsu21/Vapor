services:

#* API Web
#API 1
  api1:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: api1
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORT_API1}
    ports:
      - "${PORT_API1}:${PORT_API1}"
    networks:
      - mongo-network
    depends_on:
      cert-generator:
        condition: service_healthy

#API 2
  api2:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: api2
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORT_API2}
    ports:
      - "${PORT_API2}:${PORT_API2}"
    networks:
      - mongo-network
    depends_on:
      cert-generator:
        condition: service_healthy

#API 3
  api3:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: api3
    restart: always
    command:
      - bash
      - -c
      - |
        npm install --dev
        npm run dev
    volumes: # keep package.json updated
      - .:/app
    tty: true
    env_file:
      - .env
    environment:
      - PORT=${PORT_API3}
    ports:
      - "${PORT_API3}:${PORT_API3}"
    networks:
      - mongo-network
    depends_on:
      cert-generator:
        condition: service_healthy

#Backup api
  backup_api:
    image: busybox:latest
    container_name: backup_api
    volumes:
      - ./backup:/var/www
    command: ["httpd", "-f", "-p", "3000", "-h", "/var/www"]
    depends_on:
      cert-generator:
        condition: service_healthy

#* DATABASE
#DB 1
  mongo_db1:
    container_name: mongo_db1
    build:
      context: .
      dockerfile: Dockerfile.data
    volumes:
      - mongodb_data1:/data/db
    restart: always
    command: mongod --configsvr --replSet configReplSet --port ${DB_PORT} --bind_ip_all

#DB 2
  mongo_db2:
    container_name: mongo_db2
    build:
      context: .
      dockerfile: Dockerfile.data
    volumes:
      - mongodb_data2:/data/db
    restart: always
    command: mongod --configsvr --replSet configReplSet --port ${DB_PORT} --bind_ip_all

#DB 3
  mongo_db3:
    container_name: mongo_db3
    build:
      context: .
      dockerfile: Dockerfile.data
    volumes:
      - mongodb_data3:/data/db
    restart: always
    command: mongod --configsvr --replSet configReplSet --port ${DB_PORT} --bind_ip_all

# MongoDB Shard 1
  shard1-1:
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --shardsvr --replSet shard1ReplSet --port 27018 --bind_ip_all
    volumes:
      - ./data/shard1-1:/data/db
    networks:
      - mongo-network

  shard1-2:
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --shardsvr --replSet shard1ReplSet --port 27018 --bind_ip_all
    volumes:
      - ./data/shard1-2:/data/db
    networks:
      - mongo-network

  # MongoDB Shard 2
  shard2-1:
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --shardsvr --replSet shard2ReplSet --port 27018 --bind_ip_all
    volumes:
      - ./data/shard2-1:/data/db
    networks:
      - mongo-network

  shard2-2:
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongod --shardsvr --replSet shard2ReplSet --port 27018 --bind_ip_all
    volumes:
      - ./data/shard2-2:/data/db
    networks:
      - mongo-network

# Mongos Router
  mongos:
    build:
      context: .
      dockerfile: Dockerfile.data
    command: mongos --configdb configReplSet/config1:27019,config2:27019,config3:27019 --bind_ip_all --port 27017
    ports:
      - "27017:27017"
    networks:
      - mongo-network
    depends_on:
      - mongo_db1
      - mongo_db2
      - mongo_db3
      - shard1-1
      - shard1-2
      - shard2-1
      - shard2-2

#* NGINX
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/letsencrypt
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      api1:
        condition: service_started
      api2:
        condition: service_started
      api3:
        condition: service_started
      cert-generator:
        condition: service_healthy

#cert generator
  cert-generator:
    image: alpine:latest
    container_name: cert-generator
    volumes:
      - ./certs:/etc/letsencrypt
    command: >
      /bin/sh -c "
        apk add openssl &&
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/letsencrypt/privkey.pem -out /etc/letsencrypt/fullchain.pem -subj '/CN=localhost' &&
        chown -R 101:101 /etc/letsencrypt &&
        tail -f /dev/null  # Keeps the container active after generating the cert
      "
    healthcheck:
      test: ["CMD", "test", "-f", "/etc/letsencrypt/fullchain.pem"]  # Verifies that the certificate has been generated
      interval: 5s
      timeout: 3s
      retries: 3
      start_period: 5s

# extra
volumes:
  mongodb_data1:
    driver: local
  mongodb_data2:
    driver: local
  mongodb_data3:
    driver: local

networks:
  mongo-network:
    driver: bridge